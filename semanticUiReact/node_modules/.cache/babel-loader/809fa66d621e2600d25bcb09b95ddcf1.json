{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js\";\nimport React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nvar renderCheckbox = function renderCheckbox(_ref) {\n  var input = _ref.input,\n      label = _ref.label,\n      _ref$meta = _ref.meta,\n      error = _ref$meta.error,\n      touched = _ref$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Form.Checkbox, {\n    checked: !!input.value,\n    name: input.name,\n    label: label,\n    onChange: function onChange(e, _ref2) {\n      var checked = _ref2.checked;\n      return input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderTextArea = function renderTextArea(_ref3) {\n  var input = _ref3.input,\n      label = _ref3.label,\n      placeholder = _ref3.placeholder,\n      _ref3$meta = _ref3.meta,\n      error = _ref3$meta.error,\n      touched = _ref3$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Form.TextArea, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderTextField = function renderTextField(_ref4) {\n  var input = _ref4.input,\n      label = _ref4.label,\n      placeholder = _ref4.placeholder,\n      _ref4$meta = _ref4.meta,\n      error = _ref4$meta.error,\n      touched = _ref4$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderSelect = function renderSelect(_ref5) {\n  var label = _ref5.label,\n      input = _ref5.input,\n      options = _ref5.options,\n      placeholder = _ref5.placeholder,\n      _ref5$meta = _ref5.meta,\n      error = _ref5$meta.error,\n      touched = _ref5$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Form.Select, {\n    label: label,\n    name: input.name,\n    onChange: function onChange(e, _ref6) {\n      var value = _ref6.value;\n      return input.onChange(value);\n    },\n    options: options,\n    placeholder: placeholder,\n    value: input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderRadio = function renderRadio(_ref7) {\n  var input = _ref7.input,\n      label = _ref7.label,\n      radioValue = _ref7.radioValue,\n      _ref7$meta = _ref7.meta,\n      error = _ref7$meta.error,\n      touched = _ref7$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Form.Radio, {\n    // TODO: this needs to check\n    checked: input.value === radioValue,\n    label: label,\n    name: input.name,\n    onChange: function onChange(e, _ref8) {\n      var checked = _ref8.checked;\n      return input.onChange(radioValue);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, error)));\n};\n\nvar required = function required(value) {\n  console.log(\"value====>\", value);\n  return value ? undefined : 'Required';\n};\n\nvar email = function email(value) {\n  return value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined;\n};\n\nvar number = function number(value) {\n  return value && isNaN(Number(value)) ? 'Must be a number' : undefined;\n};\n\nvar FormBuilder = function FormBuilder(props) {\n  var handleSubmit = props.handleSubmit,\n      reset = props.reset,\n      datas = props.datas,\n      onSubmit = props.onSubmit;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, datas.map(function (data, i) {\n    var error;\n\n    if (data.validation && data.validation.errorType === 'required') {\n      error = required;\n    } else if (data.validation && data.validation.errorType === 'number') {\n      error = number;\n    } else if (data.validation && data.validation.errorType === 'email') {\n      error = email;\n    } else {\n      error = required;\n    }\n\n    var compType = '';\n\n    switch (data.type) {\n      case 'checkbox':\n        compType = renderCheckbox;\n        break;\n\n      case 'text':\n        compType = renderTextField;\n        break;\n\n      case 'textField':\n        compType = renderTextArea;\n        break;\n\n      case 'select':\n        compType = renderSelect;\n        break;\n\n      case 'radio':\n        compType = renderRadio;\n        break;\n\n      default:\n        compType = '';\n        break;\n    }\n\n    return React.createElement(Field, Object.assign({\n      Key: i,\n      component: compType\n    }, data, {\n      // needs to check for dynamic error message\n      // validate={ [ () => error(data.validation && data.validation.errorMessage) ] }\n      validate: [error],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }));\n  }), React.createElement(Form.Button, {\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Form.Button, {\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Reset\")));\n};\n\nvar FormBuilderWrap = reduxForm({\n  form: \"profile\"\n})(FormBuilder);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(\"state.form.profile.values====>\", state.form.profile && state.form.profile.values);\n  return state.form.profile ? {\n    values: state.form.profile.values,\n    submitSucceeded: state.form.profile.submitSucceeded\n  } : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);","map":{"version":3,"sources":["/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js"],"names":["React","Fragment","Field","reduxForm","Form","connect","renderCheckbox","input","label","meta","error","touched","value","name","e","checked","onChange","renderTextArea","placeholder","renderTextField","renderSelect","options","renderRadio","radioValue","required","console","log","undefined","email","test","number","isNaN","Number","FormBuilder","props","handleSubmit","reset","datas","onSubmit","map","data","i","validation","errorType","compType","type","FormBuilderWrap","form","mapStateToProps","state","profile","values","submitSucceeded"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\n\nconst renderCheckbox = ({input, label, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n        <Form.Checkbox\n            checked={!!input.value}\n            name={input.name}\n            label={label}\n            onChange={(e, { checked }) => input.onChange(checked)}\n        />\n        <div>\n            {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst renderTextArea = ({input, label, placeholder, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n        <Form.TextArea\n            {...input}\n            label={label}\n            placeholder={placeholder}\n        />\n        <div>\n            {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst renderTextField = ({input, label, placeholder, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n            < Form.Input\n            {...input}\n            label={label}\n            placeholder={placeholder} />\n            <div>\n                {touched && ((error && <span>{error}</span>))}\n            </div>\n        </Fragment>\n    )\n};\n\nconst renderSelect = ({label, input, options, placeholder, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n            <Form.Select\n            label={label}\n            name={input.name}\n            onChange={(e, { value }) => input.onChange(value)}\n            options={options}\n            placeholder={placeholder}\n            value={input.value}/>\n        <div>\n        {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst renderRadio = ({input, label, radioValue, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n        <Form.Radio\n            // TODO: this needs to check\n            checked={input.value === radioValue}\n            label={label}\n            name={input.name}\n            onChange={(e, { checked }) => input.onChange(radioValue)}\n        />\n        <div>\n            {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst required = value => {\n    console.log(\"value====>\",value);\n    return value ? undefined : 'Required'\n};\nconst email = value =>\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n        'Invalid email address' : undefined;\nconst number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined;\n\nconst FormBuilder = props => {\n    const { handleSubmit, reset, datas, onSubmit } = props;\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                {datas.map((data, i) => {\n                    let error;\n                    if (data.validation && data.validation.errorType === 'required') {\n                        error = required;\n                    } else if (data.validation && data.validation.errorType === 'number'){\n                        error = number;\n                    } else if (data.validation && data.validation.errorType === 'email'){\n                        error = email;\n                    } else {\n                        error = required;\n                    }\n                    let compType = '';\n                    switch (data.type) {\n                        case 'checkbox':\n                            compType = renderCheckbox;\n                            break;\n                        case 'text':\n                            compType = renderTextField;\n                            break;\n                        case 'textField':\n                            compType = renderTextArea;\n                            break;\n                        case 'select':\n                            compType = renderSelect;\n                            break;\n                        case 'radio':\n                            compType = renderRadio;\n                            break;\n                        default:\n                            compType = '';\n                            break;\n                    }\n                    return <Field\n                        Key = {i}\n                        component={ compType }\n                        {...data}\n                        // needs to check for dynamic error message\n                        // validate={ [ () => error(data.validation && data.validation.errorMessage) ] }\n                        validate={ [ error ] }\n                        />\n                })}\n                <Form.Button primary>Submit</Form.Button>\n                <Form.Button onClick={reset}>Reset</Form.Button>\n            </Form>\n        </Fragment>\n    )\n};\n\nconst FormBuilderWrap =  reduxForm({\n    form: \"profile\"\n})(FormBuilder);\n\nconst mapStateToProps = state => {\n    console.log(\"state.form.profile.values====>\",state.form.profile && state.form.profile.values);\n    return state.form.profile\n        ? {\n            values: state.form.profile.values,\n            submitSucceeded: state.form.profile.submitSucceeded\n        }\n        : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);"]},"metadata":{},"sourceType":"module"}