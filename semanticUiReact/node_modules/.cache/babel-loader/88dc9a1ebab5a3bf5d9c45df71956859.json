{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js\";\nimport React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\n\nvar renderCheckbox = function renderCheckbox(field) {\n  return React.createElement(Form.Checkbox, {\n    checked: !!field.input.value,\n    name: field.input.name,\n    label: field.label,\n    onChange: function onChange(e, _ref) {\n      var checked = _ref.checked;\n      return field.input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  });\n};\n\nvar renderTextArea = function renderTextArea(field) {\n  return React.createElement(Form.TextArea, Object.assign({}, field.input, {\n    label: field.label,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }));\n};\n\nvar renderTextField = function renderTextField(field) {\n  return React.createElement(Form.Input, Object.assign({}, field.input, {\n    label: field.label,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n};\n\nvar renderSelect = function renderSelect(field) {\n  return React.createElement(Form.Select, {\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref2) {\n      var value = _ref2.value;\n      return field.input.onChange(value);\n    },\n    options: field.options,\n    placeholder: field.placeholder,\n    value: field.input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n};\n\nvar renderRadio = function renderRadio(field) {\n  return React.createElement(Form.Radio, {\n    checked: field.input.value === field.radioValue,\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref3) {\n      var checked = _ref3.checked;\n      return field.input.onChange(field.radioValue);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  });\n};\n\nvar FormBuilder = function FormBuilder(props) {\n  var handleSubmit = props.handleSubmit,\n      reset = props.reset,\n      datas = props.datas;\n  console.log(\"datas====>\", datas);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, datas.map(function (data, i) {\n    console.log(\"data====>\", data, 'sasa', i);\n    var compType = '';\n\n    switch (data.type) {\n      case 'checkbox':\n        compType = renderCheckbox;\n        break;\n\n      case 'text':\n        compType = renderTextField;\n        break;\n\n      case 'textField':\n        compType = renderTextArea;\n        break;\n\n      case 'select':\n        compType = renderSelect;\n        break;\n\n      case 'radio':\n        compType = renderRadio;\n        break;\n    }\n\n    return React.createElement(Field, Object.assign({\n      Key: i,\n      component: compType\n    }, data, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }), React.createElement(Form.Button, {\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Form.Button, {\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Reset\")));\n};\n\nexport default reduxForm({\n  form: \"profile\"\n})(FormBuilder);","map":{"version":3,"sources":["/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js"],"names":["React","Fragment","Field","reduxForm","Form","renderCheckbox","field","input","value","name","label","e","checked","onChange","renderTextArea","placeholder","renderTextField","renderSelect","options","renderRadio","radioValue","FormBuilder","props","handleSubmit","reset","datas","console","log","map","data","i","compType","type","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK;AAAA,SACxB,oBAAC,IAAD,CAAM,QAAN;AACI,IAAA,OAAO,EAAE,CAAC,CAACA,KAAK,CAACC,KAAN,CAAYC,KAD3B;AAEI,IAAA,IAAI,EAAEF,KAAK,CAACC,KAAN,CAAYE,IAFtB;AAGI,IAAA,KAAK,EAAEH,KAAK,CAACI,KAHjB;AAII,IAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,UAAMC,OAAN,QAAMA,OAAN;AAAA,aAAoBN,KAAK,CAACC,KAAN,CAAYM,QAAZ,CAAqBD,OAArB,CAApB;AAAA,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADwB;AAAA,CAA5B;;AASA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAR,KAAK;AAAA,SACxB,oBAAC,IAAD,CAAM,QAAN,oBACQA,KAAK,CAACC,KADd;AAEI,IAAA,KAAK,EAAED,KAAK,CAACI,KAFjB;AAGI,IAAA,WAAW,EAAEJ,KAAK,CAACS,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwB;AAAA,CAA5B;;AAQA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAV,KAAK;AAAA,SACzB,oBAAC,IAAD,CAAM,KAAN,oBACQA,KAAK,CAACC,KADd;AAEI,IAAA,KAAK,EAAED,KAAK,CAACI,KAFjB;AAGI,IAAA,WAAW,EAAEJ,KAAK,CAACS,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADyB;AAAA,CAA7B;;AAQA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAAAX,KAAK;AAAA,SACtB,oBAAC,IAAD,CAAM,MAAN;AACI,IAAA,KAAK,EAAEA,KAAK,CAACI,KADjB;AAEI,IAAA,IAAI,EAAEJ,KAAK,CAACC,KAAN,CAAYE,IAFtB;AAGI,IAAA,QAAQ,EAAE,kBAACE,CAAD;AAAA,UAAMH,KAAN,SAAMA,KAAN;AAAA,aAAkBF,KAAK,CAACC,KAAN,CAAYM,QAAZ,CAAqBL,KAArB,CAAlB;AAAA,KAHd;AAII,IAAA,OAAO,EAAEF,KAAK,CAACY,OAJnB;AAKI,IAAA,WAAW,EAAEZ,KAAK,CAACS,WALvB;AAMI,IAAA,KAAK,EAAET,KAAK,CAACC,KAAN,CAAYC,KANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADsB;AAAA,CAA1B;;AAWA,IAAMW,WAAW,GAAG,SAAdA,WAAc,CAAAb,KAAK;AAAA,SACrB,oBAAC,IAAD,CAAM,KAAN;AACI,IAAA,OAAO,EAAEA,KAAK,CAACC,KAAN,CAAYC,KAAZ,KAAsBF,KAAK,CAACc,UADzC;AAEI,IAAA,KAAK,EAAEd,KAAK,CAACI,KAFjB;AAGI,IAAA,IAAI,EAAEJ,KAAK,CAACC,KAAN,CAAYE,IAHtB;AAII,IAAA,QAAQ,EAAE,kBAACE,CAAD;AAAA,UAAMC,OAAN,SAAMA,OAAN;AAAA,aAAoBN,KAAK,CAACC,KAAN,CAAYM,QAAZ,CAAqBP,KAAK,CAACc,UAA3B,CAApB;AAAA,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADqB;AAAA,CAAzB;;AAUA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,MACjBC,YADiB,GACcD,KADd,CACjBC,YADiB;AAAA,MACHC,KADG,GACcF,KADd,CACHE,KADG;AAAA,MACIC,KADJ,GACcH,KADd,CACIG,KADJ;AAEzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBF,KAAzB;AAEA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACpBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBE,IAAxB,EAA8B,MAA9B,EAAsCC,CAAtC;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,YAAQF,IAAI,CAACG,IAAb;AACI,WAAK,UAAL;AACID,QAAAA,QAAQ,GAAG1B,cAAX;AACA;;AACJ,WAAK,MAAL;AACI0B,QAAAA,QAAQ,GAAGf,eAAX;AACA;;AACJ,WAAK,WAAL;AACIe,QAAAA,QAAQ,GAAGjB,cAAX;AACA;;AACJ,WAAK,QAAL;AACIiB,QAAAA,QAAQ,GAAGd,YAAX;AACA;;AACJ,WAAK,OAAL;AACIc,QAAAA,QAAQ,GAAGZ,WAAX;AACA;AAfR;;AAiBA,WAAO,oBAAC,KAAD;AACH,MAAA,GAAG,EAAIW,CADJ;AAEH,MAAA,SAAS,EAAGC;AAFT,OAGCF,IAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AAKH,GAzBA,CADL,EAgCI,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,OAAO,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCJ,EAiCI,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,OAAO,EAAEL,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjCJ,CADJ,CADJ;AAuCH,CA3CD;;AA6CA,eAAerB,SAAS,CAAC;AACrB8B,EAAAA,IAAI,EAAE;AADe,CAAD,CAAT,CAEZZ,WAFY,CAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\n\nconst renderCheckbox = field => (\n    <Form.Checkbox\n        checked={!!field.input.value}\n        name={field.input.name}\n        label={field.label}\n        onChange={(e, { checked }) => field.input.onChange(checked)}\n    />\n);\n\nconst renderTextArea = field => (\n    <Form.TextArea\n        {...field.input}\n        label={field.label}\n        placeholder={field.placeholder}\n    />\n);\n\nconst renderTextField = field => (\n    <Form.Input\n        {...field.input}\n        label={field.label}\n        placeholder={field.placeholder}\n    />\n);\n\nconst renderSelect = field => (\n    <Form.Select\n        label={field.label}\n        name={field.input.name}\n        onChange={(e, { value }) => field.input.onChange(value)}\n        options={field.options}\n        placeholder={field.placeholder}\n        value={field.input.value}\n    />\n);\n\nconst renderRadio = field => (\n    <Form.Radio\n        checked={field.input.value === field.radioValue}\n        label={field.label}\n        name={field.input.name}\n        onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\n    />\n);\n\n\nconst FormBuilder = props => {\n    const { handleSubmit, reset, datas } = props;\n    console.log(\"datas====>\",datas);\n\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit}>\n                {datas.map((data, i) => {\n                    console.log(\"data====>\",data, 'sasa', i);\n                    let compType = '';\n                    switch (data.type) {\n                        case 'checkbox':\n                            compType = renderCheckbox;\n                            break;\n                        case 'text':\n                            compType = renderTextField;\n                            break;\n                        case 'textField':\n                            compType = renderTextArea;\n                            break;\n                        case 'select':\n                            compType = renderSelect;\n                            break;\n                        case 'radio':\n                            compType = renderRadio;\n                            break;\n                    }\n                    return <Field\n                        Key = {i}\n                        component={ compType }\n                        {...data}\n                        />\n                })}\n                {/*<Field\n                component={renderCheckbox}\n                label='Test'\n                name='Testtttt'\n                />*/}\n                <Form.Button primary>Submit</Form.Button>\n                <Form.Button onClick={reset}>Reset</Form.Button>\n            </Form>\n        </Fragment>\n    )\n};\n\nexport default reduxForm({\n    form: \"profile\"\n})(FormBuilder);"]},"metadata":{},"sourceType":"module"}