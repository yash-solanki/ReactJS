{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js\";\nimport React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nvar renderCheckbox = function renderCheckbox(_ref) {\n  var input = _ref.input,\n      label = _ref.label;\n  return React.createElement(Form.Checkbox, {\n    checked: !!input.value,\n    name: input.name,\n    label: label,\n    onChange: function onChange(e, _ref2) {\n      var checked = _ref2.checked;\n      return input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  });\n};\n\nvar renderTextArea = function renderTextArea(_ref3) {\n  var input = _ref3.input,\n      label = _ref3.label,\n      placeholder = _ref3.placeholder;\n  return React.createElement(Form.TextArea, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n};\n\nvar renderTextField = function renderTextField(_ref4) {\n  var input = _ref4.input,\n      label = _ref4.label,\n      placeholder = _ref4.placeholder,\n      _ref4$meta = _ref4.meta,\n      error = _ref4$meta.error,\n      touched = _ref4$meta.touched,\n      warning = _ref4$meta.warning;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, touched && (error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, error) || warning && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, warning))));\n};\n\nvar renderSelect = function renderSelect(_ref5) {\n  var label = _ref5.label,\n      input = _ref5.input,\n      options = _ref5.options,\n      placeholder = _ref5.placeholder;\n  return React.createElement(Form.Select, {\n    label: label,\n    name: input.name,\n    onChange: function onChange(e, _ref6) {\n      var value = _ref6.value;\n      return input.onChange(value);\n    },\n    options: options,\n    placeholder: placeholder,\n    value: input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n};\n\nvar renderRadio = function renderRadio(field) {\n  console.log(\"field.input.value====>\", field.input.value);\n  console.log(\"field.radioValue====>\", field.radioValue);\n  return React.createElement(Form.Radio, {\n    checked: field.input.value === field.radioValue,\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref7) {\n      var checked = _ref7.checked;\n      return field.input.onChange(field.radioValue);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n};\n\nvar required = function required(value) {\n  return value ? undefined : 'required';\n}; // const onFormSubmit = (event) => {\n//     event.preventDefault();\n//     console.log(event)\n// };\n\n\nvar FormBuilder = function FormBuilder(props) {\n  var handleSubmit = props.handleSubmit,\n      reset = props.reset,\n      datas = props.datas,\n      onSubmit = props.onSubmit; // console.log(\"datas====>\",datas);\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, datas.map(function (data, i) {\n    var compType = '';\n\n    switch (data.type) {\n      case 'checkbox':\n        compType = renderCheckbox;\n        break;\n\n      case 'text':\n        compType = renderTextField;\n        break;\n\n      case 'textField':\n        compType = renderTextArea;\n        break;\n\n      case 'select':\n        compType = renderSelect;\n        break;\n\n      case 'radio':\n        compType = renderRadio;\n        break;\n\n      default:\n        compType = '';\n        break;\n    }\n\n    return React.createElement(Field, Object.assign({\n      Key: i,\n      component: compType\n    }, data, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }), React.createElement(Form.Button, {\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Form.Button, {\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Reset\")));\n};\n\nvar FormBuilderWrap = reduxForm({\n  form: \"profile\"\n})(FormBuilder);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  // console.log(\"state==aaa==>\",state.form.profile && state.form.profile.values);\n  // console.log(\"state.form.profile.submitSucceeded====>\",state.form.profile && state.form.profile.submitSucceeded);\n  return state.form.profile ? {\n    values: state.form.profile.values,\n    submitSucceeded: state.form.profile.submitSucceeded\n  } : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);","map":{"version":3,"sources":["/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js"],"names":["React","Fragment","Field","reduxForm","Form","connect","renderCheckbox","input","label","value","name","e","checked","onChange","renderTextArea","placeholder","renderTextField","meta","error","touched","warning","renderSelect","options","renderRadio","field","console","log","radioValue","required","undefined","FormBuilder","props","handleSubmit","reset","datas","onSubmit","map","data","i","compType","type","FormBuilderWrap","form","mapStateToProps","state","profile","values","submitSucceeded"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\n\nconst renderCheckbox = ({input, label}) => (\n    <Form.Checkbox\n        checked={!!input.value}\n        name={input.name}\n        label={label}\n        onChange={(e, { checked }) => input.onChange(checked)}\n    />\n);\n\nconst renderTextArea = ({input, label, placeholder}) => (\n    <Form.TextArea\n        {...input}\n        label={label}\n        placeholder={placeholder}\n    />\n);\n\nconst renderTextField = ({input, label, placeholder, meta: {error, touched, warning}}) => {\n    return (\n        <Fragment><Form.Input\n            {...input}\n            label={label}\n            placeholder={placeholder}\n        />\n            <div>\n                {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n            </div>\n        </Fragment>\n    )\n};\n\nconst renderSelect = ({label, input, options, placeholder}) => (\n    <Form.Select\n        label={label}\n        name={input.name}\n        onChange={(e, { value }) => input.onChange(value)}\n        options={options}\n        placeholder={placeholder}\n        value={input.value}\n    />\n);\n\nconst renderRadio = field => {\n    console.log(\"field.input.value====>\",field.input.value);\n    console.log(\"field.radioValue====>\",field.radioValue);\n    return (\n        <Form.Radio\n            checked={field.input.value === field.radioValue}\n            label={field.label}\n            name={field.input.name}\n            onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\n        />\n    )\n};\n\nconst required = value => value ? undefined : 'required';\n\n// const onFormSubmit = (event) => {\n//     event.preventDefault();\n//     console.log(event)\n// };\n\nconst FormBuilder = props => {\n    const { handleSubmit, reset, datas, onSubmit } = props;\n    // console.log(\"datas====>\",datas);\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                {datas.map((data, i) => {\n                    let compType = '';\n                    switch (data.type) {\n                        case 'checkbox':\n                            compType = renderCheckbox;\n                            break;\n                        case 'text':\n                            compType = renderTextField;\n                            break;\n                        case 'textField':\n                            compType = renderTextArea;\n                            break;\n                        case 'select':\n                            compType = renderSelect;\n                            break;\n                        case 'radio':\n                            compType = renderRadio;\n                            break;\n                        default:\n                            compType = '';\n                            break;\n                    }\n                    return <Field\n                        Key = {i}\n                        component={ compType }\n                        {...data}\n                        // validate={[ required ]}\n                        />\n                })}\n                <Form.Button primary>Submit</Form.Button>\n                <Form.Button onClick={reset}>Reset</Form.Button>\n            </Form>\n        </Fragment>\n    )\n};\n\nconst FormBuilderWrap =  reduxForm({\n    form: \"profile\"\n})(FormBuilder);\n\nconst mapStateToProps = state => {\n    // console.log(\"state==aaa==>\",state.form.profile && state.form.profile.values);\n    // console.log(\"state.form.profile.submitSucceeded====>\",state.form.profile && state.form.profile.submitSucceeded);\n    return state.form.profile\n        ? {\n            values: state.form.profile.values,\n            submitSucceeded: state.form.profile.submitSucceeded\n        }\n        : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);"]},"metadata":{},"sourceType":"module"}