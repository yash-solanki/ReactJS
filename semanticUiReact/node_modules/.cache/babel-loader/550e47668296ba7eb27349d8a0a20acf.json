{"ast":null,"code":"var _jsxFileName = \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js\";\nimport React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nvar renderCheckbox = function renderCheckbox(field) {\n  return React.createElement(Form.Checkbox, {\n    checked: !!field.input.value,\n    name: field.input.name,\n    label: field.label,\n    onChange: function onChange(e, _ref) {\n      var checked = _ref.checked;\n      return field.input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  });\n};\n\nvar renderTextArea = function renderTextArea(field) {\n  return React.createElement(Form.TextArea, Object.assign({}, field.input, {\n    label: field.label,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n}; // const renderTextField = ({field, meta: {touched, error, warning}}) => (\n\n\nvar renderTextField = function renderTextField(_ref2) {\n  var input = _ref2.input,\n      label = _ref2.label,\n      placeholder = _ref2.placeholder,\n      _ref2$meta = _ref2.meta,\n      error = _ref2$meta.error,\n      touched = _ref2$meta.touched,\n      warning = _ref2$meta.warning;\n  console.log('field.meta', error);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), touched && (error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, error) || warning && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, warning)));\n};\n\nvar renderSelect = function renderSelect(field) {\n  return React.createElement(Form.Select, {\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref3) {\n      var value = _ref3.value;\n      return field.input.onChange(value);\n    },\n    options: field.options,\n    placeholder: field.placeholder,\n    value: field.input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n};\n\nvar renderRadio = function renderRadio(field) {\n  console.log(\"field.input.value====>\", field.input.value);\n  console.log(\"field.radioValue====>\", field.radioValue);\n  return React.createElement(Form.Radio, {\n    checked: field.input.value === field.radioValue,\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref4) {\n      var checked = _ref4.checked;\n      return field.input.onChange(field.radioValue);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n};\n\nvar required = function required(value) {\n  return value ? undefined : 'required';\n};\n\nvar FormBuilder = function FormBuilder(props) {\n  var handleSubmit = props.handleSubmit,\n      reset = props.reset,\n      datas = props.datas;\n  console.log(\"datas====>\", datas);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, datas.map(function (data, i) {\n    var compType = '';\n\n    switch (data.type) {\n      case 'checkbox':\n        compType = renderCheckbox;\n        break;\n\n      case 'text':\n        compType = renderTextField;\n        break;\n\n      case 'textField':\n        compType = renderTextArea;\n        break;\n\n      case 'select':\n        compType = renderSelect;\n        break;\n\n      case 'radio':\n        compType = renderRadio;\n        break;\n\n      default:\n        compType = '';\n        break;\n    }\n\n    return React.createElement(Field, Object.assign({\n      Key: i,\n      component: compType\n    }, data, {\n      validate: [required],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }), React.createElement(Form.Button, {\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(Form.Button, {\n    onClick: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Reset\")));\n};\n\nvar FormBuilderWrap = reduxForm({\n  form: \"profile\"\n})(FormBuilder);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(\"state==aaa==>\", state.form.profile && state.form.profile.values);\n  console.log(\"state.form.profile.submitSucceeded====>\", state.form.profile && state.form.profile.submitSucceeded);\n  return state.form.profile ? {\n    values: state.form.profile.values,\n    submitSucceeded: state.form.profile.submitSucceeded\n  } : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);","map":{"version":3,"sources":["/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js"],"names":["React","Fragment","Field","reduxForm","Form","connect","renderCheckbox","field","input","value","name","label","e","checked","onChange","renderTextArea","placeholder","renderTextField","meta","error","touched","warning","console","log","renderSelect","options","renderRadio","radioValue","required","undefined","FormBuilder","props","handleSubmit","reset","datas","map","data","i","compType","type","FormBuilderWrap","form","mapStateToProps","state","profile","values","submitSucceeded"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\n\nconst renderCheckbox = field => (\n    <Form.Checkbox\n        checked={!!field.input.value}\n        name={field.input.name}\n        label={field.label}\n        onChange={(e, { checked }) => field.input.onChange(checked)}\n    />\n);\n\nconst renderTextArea = field => (\n    <Form.TextArea\n        {...field.input}\n        label={field.label}\n        placeholder={field.placeholder}\n    />\n);\n\n// const renderTextField = ({field, meta: {touched, error, warning}}) => (\nconst renderTextField = ({input, label, placeholder, meta: {error, touched, warning}}) => {\n    console.log('field.meta', error);\n    return (\n        <Fragment><Form.Input\n            {...input}\n            label={label}\n            placeholder={placeholder}\n        />\n        {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n        </Fragment>\n    )\n};\n\nconst renderSelect = field => (\n    <Form.Select\n        label={field.label}\n        name={field.input.name}\n        onChange={(e, { value }) => field.input.onChange(value)}\n        options={field.options}\n        placeholder={field.placeholder}\n        value={field.input.value}\n    />\n);\n\nconst renderRadio = field => {\n    console.log(\"field.input.value====>\",field.input.value);\n    console.log(\"field.radioValue====>\",field.radioValue);\n    return (\n        <Form.Radio\n            checked={field.input.value === field.radioValue}\n            label={field.label}\n            name={field.input.name}\n            onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\n        />\n    )\n};\n\nconst required = value => value ? undefined : 'required';\n\nconst FormBuilder = props => {\n    const { handleSubmit, reset, datas } = props;\n    console.log(\"datas====>\",datas);\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit}>\n                {datas.map((data, i) => {\n                    let compType = '';\n                    switch (data.type) {\n                        case 'checkbox':\n                            compType = renderCheckbox;\n                            break;\n                        case 'text':\n                            compType = renderTextField;\n                            break;\n                        case 'textField':\n                            compType = renderTextArea;\n                            break;\n                        case 'select':\n                            compType = renderSelect;\n                            break;\n                        case 'radio':\n                            compType = renderRadio;\n                            break;\n                        default:\n                            compType = '';\n                            break;\n                    }\n                    return <Field\n                        Key = {i}\n                        component={ compType }\n                        {...data}\n                        validate={[ required ]}\n                        />\n                })}\n                <Form.Button primary>Submit</Form.Button>\n                <Form.Button onClick={reset}>Reset</Form.Button>\n            </Form>\n        </Fragment>\n    )\n};\n\nconst FormBuilderWrap =  reduxForm({\n    form: \"profile\"\n})(FormBuilder);\n\nconst mapStateToProps = state => {\n    console.log(\"state==aaa==>\",state.form.profile && state.form.profile.values);\n    console.log(\"state.form.profile.submitSucceeded====>\",state.form.profile && state.form.profile.submitSucceeded);\n    return state.form.profile\n        ? {\n            values: state.form.profile.values,\n            submitSucceeded: state.form.profile.submitSucceeded\n        }\n        : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);"]},"metadata":{},"sourceType":"module"}