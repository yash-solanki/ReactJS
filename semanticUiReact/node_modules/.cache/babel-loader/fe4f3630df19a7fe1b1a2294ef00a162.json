{"ast":null,"code":"import _classCallCheck from \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js\";\nimport React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\nvar renderCheckbox = function renderCheckbox(_ref) {\n  var input = _ref.input,\n      label = _ref.label,\n      _ref$meta = _ref.meta,\n      error = _ref$meta.error,\n      touched = _ref$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Form.Checkbox, {\n    checked: !!input.value,\n    name: input.name,\n    label: label,\n    onChange: function onChange(e, _ref2) {\n      var checked = _ref2.checked;\n      return input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderTextArea = function renderTextArea(_ref3) {\n  var input = _ref3.input,\n      label = _ref3.label,\n      placeholder = _ref3.placeholder,\n      _ref3$meta = _ref3.meta,\n      error = _ref3$meta.error,\n      touched = _ref3$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Form.TextArea, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderTextField = function renderTextField(_ref4) {\n  var input = _ref4.input,\n      label = _ref4.label,\n      placeholder = _ref4.placeholder,\n      _ref4$meta = _ref4.meta,\n      error = _ref4$meta.error,\n      touched = _ref4$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, input, {\n    label: label,\n    placeholder: placeholder,\n    onChange: input.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderSelect = function renderSelect(_ref5) {\n  var label = _ref5.label,\n      input = _ref5.input,\n      options = _ref5.options,\n      placeholder = _ref5.placeholder,\n      _ref5$meta = _ref5.meta,\n      error = _ref5$meta.error,\n      touched = _ref5$meta.touched;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Form.Select, {\n    label: label,\n    name: input.name,\n    onChange: function onChange(e, _ref6) {\n      var value = _ref6.value;\n      return input.onChange(value);\n    },\n    options: options,\n    placeholder: placeholder,\n    value: input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, error)));\n};\n\nvar renderRadio = function renderRadio(_ref7) {\n  var input = _ref7.input,\n      label = _ref7.label,\n      value = _ref7.value,\n      radioValue = _ref7.radioValue,\n      _ref7$meta = _ref7.meta,\n      error = _ref7$meta.error,\n      touched = _ref7$meta.touched;\n  console.log(\"input====>\", input);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Form.Radio, {\n    // TODO: this needs to check\n    checked: input.value === value,\n    label: label,\n    name: input.name,\n    value: value // checked={radioValue}\n    ,\n    onChange: input.onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, touched && error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, error)));\n};\n\nvar FormBuilder =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FormBuilder, _React$Component);\n\n  function FormBuilder() {\n    _classCallCheck(this, FormBuilder);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FormBuilder).apply(this, arguments));\n  }\n\n  _createClass(FormBuilder, [{\n    key: \"render\",\n    // sampleFunction() {\n    //     console.log(\"const getFormElementData\");\n    // };\n    value: function render() {\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          reset = _this$props.reset,\n          datas = _this$props.datas,\n          onSubmit = _this$props.onSubmit;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: handleSubmit(onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, datas.map(function (data, i) {\n        var compType = '';\n\n        switch (data.type) {\n          case 'checkbox':\n            compType = renderCheckbox;\n            break;\n\n          case 'text':\n            compType = renderTextField;\n            break;\n\n          case 'textField':\n            compType = renderTextArea;\n            break;\n\n          case 'select':\n            compType = renderSelect;\n            break;\n\n          case 'radio':\n            compType = renderRadio;\n            break;\n\n          default:\n            compType = '';\n            break;\n        }\n\n        return React.createElement(Field, Object.assign({\n          key: i,\n          component: compType\n        }, data, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }));\n      }), React.createElement(Form.Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(Form.Button, {\n        onClick: reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Reset\")));\n    }\n  }]);\n\n  return FormBuilder;\n}(React.Component);\n/*const FormBuilder = (props) => {\n    // useImperativeHandle(ref, () => {\n        // const sampleFunction = () => {\n        //     console.log(\"const getFormElementData\");\n        // };\n        function getAlert() {\n            alert(\"getAlert from Child\");\n        }\n    // });\n    const { handleSubmit, reset, datas, onSubmit } = props;\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                {datas.map((data, i) => {\n                    let error;\n                    if (data.validation && data.validation.errorType === 'required') {\n                        error = required;\n                    } else if (data.validation && data.validation.errorType === 'number') {\n                        error = number;\n                    } else if (data.validation && data.validation.errorType === 'email') {\n                        error = email;\n                    }\n                    let compType = '';\n                    switch (data.type) {\n                        case 'checkbox':\n                            compType = renderCheckbox;\n                            break;\n                        case 'text':\n                            compType = renderTextField;\n                            break;\n                        case 'textField':\n                            compType = renderTextArea;\n                            break;\n                        case 'select':\n                            compType = renderSelect;\n                            break;\n                        case 'radio':\n                            compType = renderRadio;\n                            break;\n                        default:\n                            compType = '';\n                            break;\n                    }\n                    return <Field\n                        Key = {i}\n                        component={ compType }\n                        {...data}\n                        // needs to check for dynamic error message\n                        // validate={ [ () => error(data.validation && data.validation.errorMessage) ] }\n                        validate={ error || '' }\n                    />\n                })}\n                <Form.Button primary>Submit</Form.Button>\n                <Form.Button onClick={reset}>Reset</Form.Button>\n            </Form>\n        </Fragment>\n    )\n};*/\n\n\nvar FormBuilderWrap = reduxForm({\n  form: \"profile\"\n})(FormBuilder);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  // console.log(\"state.form.profile.values====>\",state.form.profile && state.form.profile.values);\n  return state.form.profile ? {\n    values: state.form.profile.values,\n    submitSucceeded: state.form.profile.submitSucceeded\n  } : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);","map":{"version":3,"sources":["/home/ad.rapidops.com/yash.solanki/Practice/ReactJS/semanticUiReact/src/components/formBuilder.js"],"names":["React","Fragment","Field","reduxForm","Form","connect","renderCheckbox","input","label","meta","error","touched","value","name","e","checked","onChange","renderTextArea","placeholder","renderTextField","renderSelect","options","renderRadio","radioValue","console","log","FormBuilder","props","handleSubmit","reset","datas","onSubmit","map","data","i","compType","type","Component","FormBuilderWrap","form","mapStateToProps","state","profile","values","submitSucceeded"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Form } from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\n\nconst renderCheckbox = ({input, label, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n        <Form.Checkbox\n            checked={!!input.value}\n            name={input.name}\n            label={label}\n            onChange={(e, { checked }) => input.onChange(checked)}\n        />\n        <div>\n            {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst renderTextArea = ({input, label, placeholder, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n        <Form.TextArea\n            {...input}\n            label={label}\n            placeholder={placeholder}\n        />\n        <div>\n            {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst renderTextField = ({input, label, placeholder, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n            < Form.Input\n            {...input}\n            label={label}\n            placeholder={placeholder}\n            onChange={input.onChange}/>\n            <div>\n                {touched && ((error && <span>{error}</span>))}\n            </div>\n        </Fragment>\n    )\n};\n\nconst renderSelect = ({label, input, options, placeholder, meta: {error, touched}}) => {\n    return (\n        <Fragment>\n            <Form.Select\n            label={label}\n            name={input.name}\n            onChange={(e, { value }) => input.onChange(value)}\n            options={options}\n            placeholder={placeholder}\n            value={input.value}/>\n        <div>\n        {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nconst renderRadio = ({input, label, value, radioValue, meta: {error, touched}}) => {\n    console.log(\"input====>\",input);\n    return (\n        <Fragment>\n        <Form.Radio\n            // TODO: this needs to check\n            checked={input.value === value}\n            label={label}\n            name={input.name}\n            value={value}\n            // checked={radioValue}\n            onChange={input.onChange}\n        />\n        <div>\n            {touched && ((error && <span>{error}</span>))}\n        </div>\n        </Fragment>\n    )\n};\n\nclass FormBuilder extends React.Component{\n    // sampleFunction() {\n    //     console.log(\"const getFormElementData\");\n    // };\n    render() {\n        const { handleSubmit, reset, datas, onSubmit } = this.props;\n        return (\n            <Fragment>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    {datas.map((data, i) => {\n                        let compType = '';\n                        switch (data.type) {\n                            case 'checkbox':\n                                compType = renderCheckbox;\n                                break;\n                            case 'text':\n                                compType = renderTextField;\n                                break;\n                            case 'textField':\n                                compType = renderTextArea;\n                                break;\n                            case 'select':\n                                compType = renderSelect;\n                                break;\n                            case 'radio':\n                                compType = renderRadio;\n                                break;\n                            default:\n                                compType = '';\n                                break;\n                        }\n                        return <Field\n                            key = {i}\n                            component={ compType }\n                            {...data}\n                        />\n                    })}\n                    <Form.Button primary>Submit</Form.Button>\n                    <Form.Button onClick={reset}>Reset</Form.Button>\n                </Form>\n            </Fragment>\n        )\n    }\n}\n\n\n/*const FormBuilder = (props) => {\n    // useImperativeHandle(ref, () => {\n        // const sampleFunction = () => {\n        //     console.log(\"const getFormElementData\");\n        // };\n        function getAlert() {\n            alert(\"getAlert from Child\");\n        }\n    // });\n    const { handleSubmit, reset, datas, onSubmit } = props;\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                {datas.map((data, i) => {\n                    let error;\n                    if (data.validation && data.validation.errorType === 'required') {\n                        error = required;\n                    } else if (data.validation && data.validation.errorType === 'number') {\n                        error = number;\n                    } else if (data.validation && data.validation.errorType === 'email') {\n                        error = email;\n                    }\n                    let compType = '';\n                    switch (data.type) {\n                        case 'checkbox':\n                            compType = renderCheckbox;\n                            break;\n                        case 'text':\n                            compType = renderTextField;\n                            break;\n                        case 'textField':\n                            compType = renderTextArea;\n                            break;\n                        case 'select':\n                            compType = renderSelect;\n                            break;\n                        case 'radio':\n                            compType = renderRadio;\n                            break;\n                        default:\n                            compType = '';\n                            break;\n                    }\n                    return <Field\n                        Key = {i}\n                        component={ compType }\n                        {...data}\n                        // needs to check for dynamic error message\n                        // validate={ [ () => error(data.validation && data.validation.errorMessage) ] }\n                        validate={ error || '' }\n                    />\n                })}\n                <Form.Button primary>Submit</Form.Button>\n                <Form.Button onClick={reset}>Reset</Form.Button>\n            </Form>\n        </Fragment>\n    )\n};*/\n\nconst FormBuilderWrap =  reduxForm({\n    form: \"profile\"\n})(FormBuilder);\n\nconst mapStateToProps = state => {\n    // console.log(\"state.form.profile.values====>\",state.form.profile && state.form.profile.values);\n    return state.form.profile\n        ? {\n            values: state.form.profile.values,\n            submitSucceeded: state.form.profile.submitSucceeded\n        }\n        : {};\n};\n\nexport default connect(mapStateToProps)(FormBuilderWrap);"]},"metadata":{},"sourceType":"module"}